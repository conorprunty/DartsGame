/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package darts;

import static darts.possOuts.listOfOuts;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author a990553
 */
public class Score extends javax.swing.JFrame {

    private int count = 1;
    private boolean canSwitch = true;

    /**
     * Creates new form Score
     */
    public Score() {
        initComponents();
        enterButton.setVisible(false);
        scoreEntryTf.setVisible(false);
        mainGamePlayPanel.setVisible(false);
        //this sets the focus on the initial 'Go' button
        gameChoiceButton.requestFocusInWindow();
        setJPanelDesign();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gameOptionsComboBox = new javax.swing.JComboBox<>();
        chooseGameLabel = new javax.swing.JLabel();
        gameChoiceButton = new javax.swing.JButton();
        mainGamePlayPanel = new javax.swing.JPanel();
        gameChosenLabel = new javax.swing.JLabel();
        currentScoreLabel = new javax.swing.JLabel();
        gameChosen2Label = new javax.swing.JLabel();
        enterScoreLabel = new javax.swing.JLabel();
        scoreEntryTf = new javax.swing.JTextField();
        enterButton = new javax.swing.JButton();
        player1Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        currentScoreLabelP2 = new javax.swing.JLabel();
        gameChosen2LabelP2 = new javax.swing.JLabel();
        enterScoreLabelP2 = new javax.swing.JLabel();
        scoreEntryTfP2 = new javax.swing.JTextField();
        enterButtonP2 = new javax.swing.JButton();
        playerOneWinsLabel = new javax.swing.JLabel();
        playerOneWins = new javax.swing.JLabel();
        playerTwoWinsLabel = new javax.swing.JLabel();
        playerTwoWins = new javax.swing.JLabel();
        outsP1 = new javax.swing.JLabel();
        outsP2 = new javax.swing.JLabel();
        outAmountP1 = new javax.swing.JLabel();
        outAmountP2 = new javax.swing.JLabel();
        playerOneName = new javax.swing.JLabel();
        playerOneName1 = new javax.swing.JLabel();
        playerOneNameTf = new javax.swing.JTextField();
        playerTwoNameTf = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        resultsButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Let's play Darts!");
        setBackground(new java.awt.Color(255, 241, 178));
        setResizable(false);

        gameOptionsComboBox.setBackground(new java.awt.Color(204, 255, 255));
        gameOptionsComboBox.setFont(new java.awt.Font("Segoe UI Mono", 0, 11)); // NOI18N
        gameOptionsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "301", "501" }));
        gameOptionsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameOptionsComboBoxActionPerformed(evt);
            }
        });

        chooseGameLabel.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        chooseGameLabel.setText("Choose Game:");

        gameChoiceButton.setText("Play!");
        gameChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameChoiceButtonActionPerformed(evt);
            }
        });

        mainGamePlayPanel.setBorder(new javax.swing.border.MatteBorder(null));

        gameChosenLabel.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        gameChosenLabel.setText("dummyText");

        currentScoreLabel.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        currentScoreLabel.setText("dummyText");

        gameChosen2Label.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        gameChosen2Label.setText("dummyText");

        enterScoreLabel.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        enterScoreLabel.setText("dummyText");

        enterButton.setText("Enter");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        player1Label.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        player1Label.setText("Player 1:");

        player2Label.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        player2Label.setText("Player 2:");

        currentScoreLabelP2.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        currentScoreLabelP2.setText("dummyText");

        gameChosen2LabelP2.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        gameChosen2LabelP2.setText("dummyText");

        enterScoreLabelP2.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        enterScoreLabelP2.setText("dummyText");

        enterButtonP2.setText("Enter");
        enterButtonP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonP2ActionPerformed(evt);
            }
        });

        playerOneWinsLabel.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerOneWinsLabel.setText("Wins:");

        playerOneWins.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerOneWins.setText("0");

        playerTwoWinsLabel.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerTwoWinsLabel.setText("Wins:");

        playerTwoWins.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerTwoWins.setText("0");

        outsP1.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        outsP1.setText("Best out:");

        outsP2.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        outsP2.setText("Best out:");

        outAmountP1.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        outAmountP1.setText("None");

        outAmountP2.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        outAmountP2.setText("None");

        javax.swing.GroupLayout mainGamePlayPanelLayout = new javax.swing.GroupLayout(mainGamePlayPanel);
        mainGamePlayPanel.setLayout(mainGamePlayPanelLayout);
        mainGamePlayPanelLayout.setHorizontalGroup(
            mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(player1Label)
                            .addComponent(enterScoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(currentScoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(outsP1)))
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gameChosen2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(playerOneWinsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerOneWins))
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterButton)
                            .addComponent(scoreEntryTf, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainGamePlayPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(outAmountP1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(player2Label)
                        .addComponent(enterScoreLabelP2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addComponent(currentScoreLabelP2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainGamePlayPanelLayout.createSequentialGroup()
                        .addComponent(outsP2)
                        .addGap(42, 42, 42)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                        .addComponent(playerTwoWinsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerTwoWins))
                    .addComponent(gameChosen2LabelP2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(scoreEntryTfP2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterButtonP2)
                    .addComponent(outAmountP2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
            .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gameChosenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainGamePlayPanelLayout.setVerticalGroup(
            mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainGamePlayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gameChosenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(player1Label)
                    .addComponent(player2Label)
                    .addComponent(playerOneWinsLabel)
                    .addComponent(playerOneWins)
                    .addComponent(playerTwoWinsLabel)
                    .addComponent(playerTwoWins))
                .addGap(13, 13, 13)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameChosen2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentScoreLabelP2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameChosen2LabelP2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreEntryTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterScoreLabelP2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreEntryTfP2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterButton)
                    .addComponent(enterButtonP2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(mainGamePlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outsP1)
                    .addComponent(outsP2)
                    .addComponent(outAmountP1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outAmountP2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        playerOneName.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerOneName.setText("Player One Name:");

        playerOneName1.setFont(new java.awt.Font("Segoe UI Mono", 1, 12)); // NOI18N
        playerOneName1.setText("Player Two Name:");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        resultsButton.setText("Results");
        resultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerOneName1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(playerTwoNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(gameChoiceButton)
                        .addGap(32, 32, 32)
                        .addComponent(exitButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(playerOneName, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chooseGameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(gameOptionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(playerOneNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGap(227, 227, 227)
                            .addComponent(resultsButton)
                            .addGap(56, 56, 56))
                        .addComponent(mainGamePlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gameOptionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseGameLabel)
                    .addComponent(resultsButton))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerOneName)
                    .addComponent(playerOneNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerOneName1)
                    .addComponent(playerTwoNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameChoiceButton)
                    .addComponent(exitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(mainGamePlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gameOptionsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameOptionsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gameOptionsComboBoxActionPerformed

    private void gameChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameChoiceButtonActionPerformed
        // TODO add your handling code here:
        if (gameChoiceButton.getText().equals("Reset")) {
            int choice = JOptionPane.showConfirmDialog(null,
                    "Are you sure? This will reset the players scores",
                    "Reset",
                    JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                if (checkEmpty(playerOneNameTf.getText()) || checkEmpty(playerTwoNameTf.getText())
                        || nameMaxLength(playerOneNameTf.getText()) || nameMaxLength(playerTwoNameTf.getText())) {
                    JOptionPane.showMessageDialog(null, "Player names both need to be completed and under 10 characters");
                } else {
                    try {
                        createSaveFile();
                    } catch (IOException ex) {
                        Logger.getLogger(Score.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    playerOneWins.setText("0");
                    playerTwoWins.setText("0");
                    gameChosenLabel.setText("Game Chosen: " + gameOptionsComboBox.getSelectedItem());
                    gameChosen2Label.setText((String) gameOptionsComboBox.getSelectedItem());
                    gameChosen2LabelP2.setText((String) gameOptionsComboBox.getSelectedItem());
                    outAmountP1.setText("None");
                    outAmountP2.setText("None");
                    showPlayerOne();
                    hidePlayerTwo();
                    showP1Outs();
                    hideP2Outs();
                }
            }
        } else if (checkEmpty(playerOneNameTf.getText()) || checkEmpty(playerTwoNameTf.getText())
                || nameMaxLength(playerOneNameTf.getText()) || nameMaxLength(playerTwoNameTf.getText())) {
            JOptionPane.showMessageDialog(null, "Player names both need to be completed and under 10 characters");
        } else {
            gameChosenLabel.setText("Game Chosen: " + gameOptionsComboBox.getSelectedItem());
            currentScoreLabel.setText("Current Score: ");
            currentScoreLabelP2.setText("Current Score: ");
            gameChosen2Label.setText((String) gameOptionsComboBox.getSelectedItem());
            gameChosen2LabelP2.setText((String) gameOptionsComboBox.getSelectedItem());
            enterScoreLabel.setText("Enter Score: ");
            enterScoreLabelP2.setText("Enter Score: ");
            enterButton.setVisible(true);
            scoreEntryTf.setVisible(true);
            mainGamePlayPanel.setVisible(true);
            scoreEntryTf.setText("");
            gameChoiceButton.setText("Reset");
            player1Label.setText(playerOneNameTf.getText() + ":");
            player2Label.setText(playerTwoNameTf.getText() + ":");
            hidePlayerTwo();
            hideP2Outs();
        }

    }//GEN-LAST:event_gameChoiceButtonActionPerformed

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
        // TODO add your handling code here:
        if (count < 3) {
            playerOneTurn();
        } else if (count == 3) {
            playerOneTurn();
            if (canSwitch) {
                showPlayerTwo();
                hidePlayerOne();
                showP2Outs();
                hideP1Outs();
                count = 1;
                scoreEntryTf.setText("");
            }
        }

    }//GEN-LAST:event_enterButtonActionPerformed

    private void enterButtonP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonP2ActionPerformed
        // TODO add your handling code here:
        if (count < 3) {
            playerTwoTurn();
        } else if (count == 3) {
            playerTwoTurn();
            if (canSwitch) {
                showPlayerOne();
                hidePlayerTwo();
                showP1Outs();
                hideP2Outs();
                count = 1;
                scoreEntryTfP2.setText("");
            }
        }

    }//GEN-LAST:event_enterButtonP2ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(null,
                "Are you sure?",
                "Exit",
                JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            try {
                createSaveFile();
            } catch (IOException ex) {
                Logger.getLogger(Score.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }

    }//GEN-LAST:event_exitButtonActionPerformed

    private void resultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsButtonActionPerformed
        File f = new File(getUserPath() + "\\scores.txt");
        if (f.exists() && !f.isDirectory()) {
            try {
                FileInputStream in = new FileInputStream(f);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                //this just records a list of the last 5 items for printing purposes
                List<String> lines = new LinkedList<>();
                for (String tmp; (tmp = br.readLine()) != null;) {
                    if (lines.add(tmp) && lines.size() > 5) {
                        lines.remove(0);
                    }
                }
                JOptionPane.showMessageDialog(null, getResultsList((LinkedList<?>) lines), "Last 5 Results", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Score.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Score.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "There are no past results");
        }
    }//GEN-LAST:event_resultsButtonActionPerformed

    public void playerOneTurn() {
        if (checkIfNumber(scoreEntryTf.getText())) {
            int currentScore = Integer.parseInt(gameChosen2Label.getText());
            int pointsThrown = Integer.parseInt(scoreEntryTf.getText());
            if (currentScore > pointsThrown && possibleThrows(pointsThrown) && currentScore - pointsThrown != 1) {
                int updatedScore = currentScore - pointsThrown;
                String possOuts = listOfOuts(Integer.toString(updatedScore));
                gameChosen2Label.setText(Integer.toString(updatedScore));
                scoreEntryTf.setText("");
                outAmountP1.setText(possOuts);
                count++;
                canSwitch = true;
            } else if (currentScore == pointsThrown && possibleThrows(pointsThrown)) {
                //replaceFirst just removed the colon for the winning message as text
                //taken from other jLabel
                JOptionPane.showMessageDialog(null, player1Label.getText().replaceFirst(":$", "") + " wins!");
                playerOneWins.setText(Integer.toString(addOneToWins(playerOneWins.getText())));
                scoreEntryTf.setText("");
                gameChosen2Label.setText(gameChosenLabel.getText().replaceAll("[^0-9]", ""));
                gameChosen2LabelP2.setText(gameChosenLabel.getText().replaceAll("[^0-9]", ""));
                outAmountP1.setText("None");
                outAmountP2.setText("None");
                count = 1;
            } else {
                JOptionPane.showMessageDialog(null, "You can't possibly have scored that.");
                scoreEntryTf.setText("");
                canSwitch = false;
            }
        } else {
            scoreEntryTf.setText("");
            canSwitch = false;
        }
    }

    public void playerTwoTurn() {
        if (checkIfNumber(scoreEntryTfP2.getText())) {
            int currentScore = Integer.parseInt(gameChosen2LabelP2.getText());
            int pointsThrown = Integer.parseInt(scoreEntryTfP2.getText());
            if (currentScore > pointsThrown && possibleThrows(pointsThrown) && currentScore - pointsThrown != 1) {
                int updatedScore = currentScore - pointsThrown;
                String possOuts = listOfOuts(Integer.toString(updatedScore));
                gameChosen2LabelP2.setText(Integer.toString(updatedScore));
                scoreEntryTfP2.setText("");
                outAmountP2.setText(listOfOuts(Integer.toString(currentScore)));
                outAmountP2.setText(possOuts);
                count++;
                canSwitch = true;
            } else if (currentScore == pointsThrown && possibleThrows(pointsThrown)) {
                //replaceFirst just removed the colon for the winning message as text
                //taken from other jLabel
                JOptionPane.showMessageDialog(null, player2Label.getText().replaceFirst(":$", "") + " wins!");
                playerTwoWins.setText(Integer.toString(addOneToWins(playerTwoWins.getText())));
                scoreEntryTfP2.setText("");
                showPlayerOne();
                hidePlayerTwo();
                showP1Outs();
                hideP2Outs();
                gameChosen2Label.setText(gameChosenLabel.getText().replaceAll("[^0-9]", ""));
                gameChosen2LabelP2.setText(gameChosenLabel.getText().replaceAll("[^0-9]", ""));
                count = 1;
                outAmountP1.setText("None");
                outAmountP2.setText("None");
            } else {
                JOptionPane.showMessageDialog(null, "You can't possibly have scored that.");
                scoreEntryTfP2.setText("");
                canSwitch = false;
            }
        } else {
            scoreEntryTfP2.setText("");
            canSwitch = false;
        }

    }

    boolean checkIfNumber(String s) {
        try {
            Integer.parseInt(s);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "You did not enter a valid number!");
            return false;
        }
        return true;
    }

    public boolean possibleThrows(int input) {
        if (input == 25 || input == 50) {
            return true;
        }
        for (int i = 0; i <= 20; i++) {
            for (int j = 1; j <= 3; j++) {
                if (i * j == input) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean checkEmpty(String s) {
        return !(s != null && !s.isEmpty());
    }

    public boolean nameMaxLength(String s) {
        return s.length() > 10;
    }

    public void createSaveFile() throws IOException {
        //note this saves to the directory I'm working on :)
        String saveOutput;
        if (!(playerOneWins.getText().equals("0") && playerTwoWins.getText().equals("0"))) {
            try {
                String userPath = getUserPath();
                File file = new File(userPath + "\\scores.txt");
                file.createNewFile();
                final Path path = Paths.get(file.getPath());
                saveOutput = player1Label.getText().replaceFirst(":$", "") + " "
                        + playerOneWins.getText() + " - " + playerTwoWins.getText()
                        + " " + player2Label.getText().replaceFirst(":$", "");
                Files.write(path, Arrays.asList(saveOutput), StandardCharsets.UTF_8,
                        Files.exists(path) ? StandardOpenOption.APPEND : StandardOpenOption.CREATE);
            } catch (FileNotFoundException f) {
                JOptionPane.showMessageDialog(null, "Unable to save scores");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Unable to save scores");
            }
        }
    }

    public String getUserPath() {
        try {
            String path = Score.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            path = path.substring(0, path.lastIndexOf("/") + 1);
            String decodedPath = URLDecoder.decode(path, "UTF-8");
            return decodedPath;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Score.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public String getResultsList(LinkedList<?> list) {
        String result = "";
        for (Object s : list) {
            result = result.concat(s + "\n");
        }
        return result;
    }

    public void startAgain() {
        mainGamePlayPanel.setVisible(false);
    }

    public void hidePlayerOne() {
        enterScoreLabel.setVisible(false);
        scoreEntryTf.setVisible(false);
        enterButton.setVisible(false);
    }

    public void hidePlayerTwo() {
        enterScoreLabelP2.setVisible(false);
        scoreEntryTfP2.setVisible(false);
        enterButtonP2.setVisible(false);
    }

    public void showPlayerOne() {
        enterScoreLabel.setVisible(true);
        scoreEntryTf.setVisible(true);
        enterButton.setVisible(true);
    }

    public void showPlayerTwo() {
        enterScoreLabelP2.setVisible(true);
        scoreEntryTfP2.setVisible(true);
        enterButtonP2.setVisible(true);
    }

    public void hideP1Outs() {
        outsP1.setVisible(false);
        outAmountP1.setVisible(false);
    }

    public void showP1Outs() {
        outsP1.setVisible(true);
        outAmountP1.setVisible(true);
    }

    public void hideP2Outs() {
        outsP2.setVisible(false);
        outAmountP2.setVisible(false);
    }

    public void showP2Outs() {
        outsP2.setVisible(true);
        outAmountP2.setVisible(true);
    }

    public int addOneToWins(String s) {
        int newAmount = (Integer.parseInt(s) + 1);
        return newAmount;
    }

    public final void setJPanelDesign() {
        mainGamePlayPanel.setBackground(new Color(255, 241, 178));
        mainGamePlayPanel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
        buttonDesign(gameChoiceButton);
        buttonDesign(enterButton);
        buttonDesign(enterButtonP2);
        buttonDesign(exitButton);
        buttonDesign(resultsButton);
    }

    public final void buttonDesign(JButton b) {
        b.setBackground(new Color(59, 89, 182));
        b.setFont(new Font("Tahoma", Font.BOLD, 12));
        b.setForeground(Color.WHITE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Score.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Score.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Score.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Score.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Score().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chooseGameLabel;
    private javax.swing.JLabel currentScoreLabel;
    private javax.swing.JLabel currentScoreLabelP2;
    private javax.swing.JButton enterButton;
    private javax.swing.JButton enterButtonP2;
    private javax.swing.JLabel enterScoreLabel;
    private javax.swing.JLabel enterScoreLabelP2;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton gameChoiceButton;
    private javax.swing.JLabel gameChosen2Label;
    private javax.swing.JLabel gameChosen2LabelP2;
    private javax.swing.JLabel gameChosenLabel;
    private javax.swing.JComboBox<String> gameOptionsComboBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainGamePlayPanel;
    private javax.swing.JLabel outAmountP1;
    private javax.swing.JLabel outAmountP2;
    private javax.swing.JLabel outsP1;
    private javax.swing.JLabel outsP2;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel playerOneName;
    private javax.swing.JLabel playerOneName1;
    private javax.swing.JTextField playerOneNameTf;
    private javax.swing.JLabel playerOneWins;
    private javax.swing.JLabel playerOneWinsLabel;
    private javax.swing.JTextField playerTwoNameTf;
    private javax.swing.JLabel playerTwoWins;
    private javax.swing.JLabel playerTwoWinsLabel;
    private javax.swing.JButton resultsButton;
    private javax.swing.JTextField scoreEntryTf;
    private javax.swing.JTextField scoreEntryTfP2;
    // End of variables declaration//GEN-END:variables
}
